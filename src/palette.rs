use once_cell::sync::Lazy;

const BACKGROUND: [u8; 3] = [211, 188, 148];
pub const BASE: [[u8; 3]; 62] = [
    [0, 0, 0],
    [127, 178, 56],
    [247, 233, 163],
    [199, 199, 199],
    [255, 0, 0],
    [160, 160, 255],
    [167, 167, 167],
    [0, 124, 0],
    [255, 255, 255],
    [164, 168, 184],
    [151, 109, 77],
    [112, 112, 112],
    [64, 64, 255],
    [143, 119, 72],
    [255, 252, 245],
    [216, 127, 51],
    [178, 76, 216],
    [102, 153, 216],
    [229, 229, 51],
    [127, 204, 25],
    [242, 127, 165],
    [76, 76, 76],
    [153, 153, 153],
    [76, 127, 153],
    [127, 63, 178],
    [51, 76, 178],
    [102, 76, 51],
    [102, 127, 51],
    [153, 51, 51],
    [25, 25, 25],
    [250, 238, 77],
    [92, 219, 213],
    [74, 128, 255],
    [0, 217, 58],
    [129, 86, 49],
    [112, 2, 0],
    [209, 177, 161],
    [159, 82, 36],
    [149, 87, 108],
    [112, 108, 138],
    [186, 133, 36],
    [103, 117, 53],
    [160, 77, 78],
    [57, 41, 35],
    [135, 107, 98],
    [87, 92, 92],
    [122, 73, 88],
    [76, 62, 92],
    [76, 50, 35],
    [76, 82, 42],
    [142, 60, 46],
    [37, 22, 16],
    [189, 48, 49],
    [148, 63, 97],
    [92, 25, 29],
    [22, 126, 134],
    [58, 142, 140],
    [86, 44, 62],
    [20, 180, 133],
    [100, 100, 100],
    [216, 175, 147],
    [127, 167, 150],
];
const FACTORS: [u8; 4] = [180, 220, 255, 135];

pub const PALETTE_LEN: usize = BASE.len() * FACTORS.len();

pub static PALETTE: Lazy<[u8; PALETTE_LEN * 3]> = Lazy::new(|| {
    let mut palette: [u8; PALETTE_LEN * 3] = BASE
        .iter()
        .flat_map(|rgb| {
            FACTORS.iter().flat_map(move |&f| {
                rgb.iter().map(
                    #[allow(clippy::cast_possible_truncation)] // 255Ã—255 < 2^16
                    move |&v| (u16::from(v) * u16::from(f) / 255) as u8,
                )
            })
        })
        .collect::<Vec<_>>()
        .try_into()
        .unwrap();
    palette[0..3].copy_from_slice(&BACKGROUND);
    palette
});

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn derive() {
        assert_eq!(PALETTE[0..3], [211, 188, 148]);
        assert_eq!(PALETTE[3..12], [0; 9]);
        assert_eq!(PALETTE[12..15], [89, 125, 39]);
        assert_eq!(PALETTE[15..18], [109, 153, 48]);
        assert_eq!(PALETTE[18..21], [127, 178, 56]);
        assert_eq!(PALETTE[21..24], [67, 94, 29]);
        assert_eq!(PALETTE[96..99], [180, 180, 180]);
        assert_eq!(PALETTE[99..102], [220, 220, 220]);
        assert_eq!(PALETTE[102..105], [255, 255, 255]);
        assert_eq!(PALETTE[105..108], [135, 135, 135]);
    }
}
